// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot;

import edu.wpi.first.hal.FRCNetComm.tInstances;
import edu.wpi.first.hal.FRCNetComm.tResourceType;
import edu.wpi.first.hal.HAL;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.commands.*;
import frc.robot.subsystems.*;

import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */

public class Robot extends TimedRobot {
    public static NetworkTable limelight = NetworkTableInstance.getDefault().getTable("limelight");
    NetworkTableEntry xOffset = limelight.getEntry("tx");
    NetworkTableEntry yOffset = limelight.getEntry("ty");
    NetworkTableEntry targetArea = limelight.getEntry("ta");

    Command LimelightCenter;
    Command autonomousCommand;
    edu.wpi.first.wpilibj2.command.Command newAutoCommand;
    Command MoveUntilSize;
    SendableChooser<Command> chooser = new SendableChooser<>();

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static PIDDriveTrain driveTrainPID;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        driveTrainPID = new PIDDriveTrain();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        HAL.report(tResourceType.kResourceType_Framework, tInstances.kFramework_RobotBuilder);

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());
        chooser.addOption("Move Until", new MoveUntilSize());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
        SmartDashboard.putNumber("Minimum Speed", 0.25);
        SmartDashboard.putNumber("Tolerance", 0.35);
        SmartDashboard.putNumber("Speed to Area Mult", 11);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        autonomousCommand = new LimelightCenter();
        // newAutoCommand = new PIDDriveTrainAim(Robot.driveTrainPID);
        // newAutoCommand.st
        // schedule the autonomous  command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        
    }

    @Override
    public void teleopInit() {
        Robot.driveTrain.ahrs.reset();
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void robotPeriodic(){
        SmartDashboard.putNumber("xOffset", xOffset.getDouble(0.0));
        SmartDashboard.putNumber("yOffset", yOffset.getDouble(0.0));
        SmartDashboard.putNumber("Target Area", targetArea.getDouble(0.0));
        SmartDashboard.putNumber("Active Pipeline", getPipelineId());
        SmartDashboard.putNumber("Distance via Vision", getTargetDistanceFromCamera());
        SmartDashboard.putNumber("Distance via Vision in feet", getTargetDistanceFromCamera() / 12);
    }

    public static double getPipelineId() {
        return limelight.getEntry("getpipe").getDouble(0);
    }

    public static double getLimelightXOffset() {
        return limelight.getEntry("xOffset").getDouble(0);
    }

    public static double getTargetDistanceFromCamera() {
        double targetHeight = 93; // in inches
        double cameraAngle = 20; //degrees
        double cameraHeight = 7.5; // inches
        NetworkTableEntry yOffset = limelight.getEntry("ty");
        double imageAngle = yOffset.getDouble(0.0);
        return (targetHeight - cameraHeight) / Math.tan(Math.toRadians( imageAngle + cameraAngle ) );
    }
}
